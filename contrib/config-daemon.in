mainmenu "GNUnet Server Configuration"

	config HOSTS
	string "Where should gnunetd keep the list of peers"
	default "$GNUNETD_HOME/data/hosts/"
	depends on Meta::ADVANCED
	help
		This directory should be made available periodically --- it contains
		information how to join GNUnet that is in no way private to the
		local node.  This directory can be shared between nodes AND should
		be put on a public web-server (if possible).  You should find a list
		of known hosts under http://gnunet.org/hosts/, you can copy
		those files into this directory.
		
		If you specify a HOSTLISTURL, the directory will be automatically
		populated by gnunetd with an initial set of nodes.
		Default: HOSTS   	= $GNUNETD_HOME/data/hosts/

	config HOSTLISTURL
	string "Where can GNUnet find an initial list of peers"
	depends on Meta::ADVANCED
	default "http://gnunet.org/hostlist http://gnunet.mine.nu:8081/hostlist http://de.gnunet.org/cgi-bin/hostlist.cgi http://uk.gnunet.org/hostlist"
	help
		GNUnet can automatically update the hostlist from the web. While
		GNUnet internally communicates which hosts are online, it is
		typically a good idea to get a fresh hostlist whenever gnunetd
		starts from the WEB. By setting this option, you can specify from
		which server gnunetd should try to download the hostlist. The
		default should be fine for now.
		
		The general format is a list of space-separated URLs.  Each URL must
		have the format http://HOSTNAME/FILENAME
		
		If you want to setup an alternate hostlist server, you must run a
		permanent node and "cat data/hosts/* > hostlist" every few minutes
		to keep the list up-to-date.
		
		If you do not specify a HOSTLISTURL, you must copy valid hostkeys to
		data/hosts manually.
		Default: HOSTLISTURL = "http://gnunet.org/hostlist http://gnunet.mine.nu:8081/hostlist http://de.gnunet.org/cgi-bin/hostlist.cgi http://uk.gnunet.org/hostlist"
    
	config HTTP-PROXY
	string "HTTP Proxy Server"
	default ""
	depends on Meta::ADVANCED
	help
		If you have to use a proxy for outbound HTTP connections,
		specify the proxy configuration here.  Default is no proxy.
  

	config TRANSPORTS
	string "Which transport mechanisms are available?"
	default "udp tcp http nat"
	depends on Meta::ADVANCED
	help
		Which transport mechanisms are available? Use space-separated list
		of the modules, e.g.  "udp smtp tcp". The order is irrelevant, each
		protocol has a build-in cost-factor and this factor determines which
		protocols are preferred.  
		
		The available transports at this point are udp, tcp, http, smtp,
		tcp6, udp6 and the special 'nat' service.
		
		Loading the 'nat' and 'tcp' modules is required for peers behind NAT
		boxes that cannot directly be reached from the outside.  Peers that
		are NOT behind a NAT box and that want to *allow* peers that ARE
		behind a NAT box to connect must ALSO load the 'nat' module.  Note
		that the actual transfer will always be via tcp initiated by the peer
		behind the NAT box.
		
		Usually, the default is just fine for most people.
		Choices are: "udp tcp udp6 tcp6 nat http smtp"
		Default: TRANSPORTS = "udp tcp http nat"

	config PROCESS-PRIORITY
	string "Process priority"
	default "NORMAL"
	depends on Meta::ADVANCED
	help
		At which priority should the GNUnet server run? If you don't want it
		to interfere with other applications, set this to "BELOW NORMAL" 
                or "IDLE".  Acceptable values are "NORMAL" (0), "BELOW NORMAL" (10), 
                "ABOVE NORMAL" (-5), "HIGH" (-10), "IDLE" (19) and nice(1) increments 
                (a numeric value between -20 and 19, keep in mind that values smaller 
                than 0 require root privileges).  Default is "NORMAL".

	config USER
	string "GNUnet user"
	default ""
	depends on Meta::ADVANCED
	help
		As which user account should gnunetd run?
		Empty means "current user". On computer startup, it is root/SYSTEM.
		Under Windows, this setting affects the creation of a new
		system service only.

	config GROUP
	string "GNUnet group"
	default ""
	depends on Meta::ADVANCED
	help
		As which group account should gnunetd run?
		Empty means current group under Unix. It has no meaning under Windows.

	config AUTOSTART
	bool "Start GNUnet daemon automatically"
	default n
	depends on Meta::RARE
	help
		This is used by the configuration wizards to remember whether to start
		the GNUnet daemon at computer startup.

endmenu


menu "Network" "NETWORK"
	config PORT
	int "Client/Server Port"
	range 1 65535
	default "2087"
	depends on Meta::ADVANCED
	help
		Which is the client-server port that is used between gnunetd and the
		clients (TCP only).  You may firewall this port for non-local
		machines (but you do not have to since GNUnet will perform access
		control and only allow connections from machines that are listed
		under TRUSTED).
		Default: PORT = 2087

	config INTERFACE
	string "Interface to probe for external IP"
	help
		Set if GNUnet fails to determine your IP.  GNUnet first tries to
		determine your IP by looking at the IP that matches the interface
		that is given with the option INTERFACE.
		Under Windows, specify the ID reported by "gnunet-win-tool -n".
  
	config IP
	string "Forced value of external IP or hostname"
	help
		If obtaining the external IP from an interface will not result
		in the right information, use the IP setting.  Setting IP can
                be used to specify the external IP directly or to make GNUnet
		lookup the external IP using DNS.
		
		This is typically the best option if you are behind a router/gateway
		that performs network address translation (NAT).  If the router has
		a fixed external IP, use that IP.  If the router itself obtains its
		IP dynamically (say via DHCP), use the DNS lookup in combination with
		DynDNS.  In either case make sure that the router forwards incoming
		UDP and TCP messages on the GNUnet port (default: 2086) to the 
		GNUnet host in the local network.  If this is not possible, read
		about the LIMITED option for NAT.
		
		If in doubt, try without.  Default is empty.
  
	config HELLOEXCHANGE
	bool "Participate in network topology management"
	default y
	depends on Meta::ADVANCED
	help
		If this host is connected to two networks, a private which is not
		reachable from the Internet and that contains GNUnet clients and to
		a public network, typically the Internet (and is this host is thus
		in the position of a router, typically doing NAT), then this option
		should be set to 'NO'. It prevents the node from forwarding HELLOs
		other than its own. 

                If in doubt, use YES.  Default is YES.
  
	config TRUSTED
	string "IPs allowed to use gnunetd server"
	default "127.0.0.0/8;"
	depends on Meta::ADVANCED
	help
		This option specifies which hosts are trusted enough
		to connect as clients (to the TCP port).  This is useful if you run
		gnunetd on one host of your network and want to allow all other
		hosts to use this node as their server.  By default, this is set to
		'loopback only'.  The format is IP/NETMASK where the IP is specified in
		dotted-decimal and the netmask either in CIDR notation (/16) or in
		dotted decimal (255.255.0.0). Several entries must be separated by a
		semicolon, spaces are not allowed. 

		Default is "127.0.0.0/8;".

endmenu


menu "Resource limitations" "LOAD"

	config BASICLIMITING
	bool "Basic bandwidth limiting"
	default y
	help
		Use basic bandwidth limitation? (YES/NO).  If in doubt, say YES.

                Basic bandwidth limitation (YES) means simply that the bandwidth limits
                specified apply to GNUnet and only to GNUnet.  If set to YES, you
                simply specify the maximum bandwidth (upstream and downstream) 
                that GNUnet is allowed to use and GNUnet will stick to those
                limitations.  This is useful if your overall bandwidth is so large that
                the limit is mostly used to ensure that enough capacity is left for
                other applications.  Even if you want to dedicate your entire connection
                to GNUnet you should not set the limits to values higher than what you
                have since GNUnet uses those limits to determine for example the number
                of connections to establish (and it would be inefficient if that 
                computation yields a number that is far too high).  

                While basic bandwidth limitation is simple and always works, there are
                some situations where it is not perfect.  Suppose you are running
                another application which performs a larger download.  During that
                particular time, it would be nice if GNUnet would throttle its
                bandwidth consumption (automatically) and resume using more bandwidth
                after the download is complete.  This is obviously advanced magic since
                GNUnet will have to monitor the behavior of other applications. 
                Another scenario is a monthly cap on bandwidth imposed by your ISP,
                which you would want to ensure is obeyed.  Here, you may want
                GNUnet to monitor the traffic from other applications to ensure that
                the combined long-term traffic is within the pre-set bounds.  Note
                that you should probably not set the bounds tightly since GNUnet may
                observe that the bounds are about to be broken but would be unable to
                stop other applications from continuing to use bandwidth.

                If either of these two scenarios applies, set BASICLIMITING to NO.
                Then set the bandwidth limits to the COMBINED amount of traffic that
                is accepable for both GNUnet and other applications.  GNUnet will
                then immediately throttle bandwidth consumption if the short-term
                average is above the limit, and it will also try to ensure that the
                long-term average is below the limit.  Note however that using NO
                can have the effect of GNUnet (almost) ceasing operations after
                other applications perform high-volume downloads that are beyond the
                defined limits.  GNUnet would reduce consumption until the long-term
                limits are again within bounds.

                NO only works on platforms where GNUnet can monitor the amount of
                traffic that the local host puts out on the network.  This is only
                implemented for Linux and Win32.  In order for the code to work, GNUnet
                needs to know the specific network interface that is used for the
                external connection (after all, the amount of traffic on loopback
                or on the LAN should never be counted since it is irrelevant).

		Default is: BASICLIMITING = YES

	config INTERFACES
	string "Network interface to monitor"
	depends on !Meta::BASICLIMITING
	help
		For which interfaces should we do accounting?  GNUnet will evaluate
		the total traffic (not only the GNUnet related traffic) and adjust
		its bandwidth usage accordingly. You can currently only specify a
		single interface. GNUnet will also use this interface to determine
		the IP to use. Typical values are eth0, ppp0, eth1, wlan0, etc.
		'ifconfig' will tell you what you have.  Never use 'lo', that just
		won't work.
		Under Windows, specify the index number reported by
		 "gnunet-win-tool -n".

	config MAXNETDOWNBPSTOTAL
	int "Maximum download (bytes per second)"
	default 50000
	help
		Bandwidth limit for incoming traffic in bytes per second.  
		Default is 50000.
  
	config MAXNETUPBPSTOTAL
	int "Maximum upload (bytes per second)"
	default 50000
	help
		Bandwidth limit for outgoing traffic in bytes per second. 
		Default is 50000.

	config MAXCPULOAD
	int "Maximum CPU load (percentage)"
	range 0 100
	default 50
	help
		Which CPU load can be tolerated.  Load here always refers to the total
		system load, that is it includes CPU utilization by other processes.
		A value of 50 means that once your 1 minute-load average goes over 50%	
		non-idle, GNUnet will try to reduce CPU consumption until the load goes 
		under the threshold.  Reasonable values are typically between 50 and 90.
		Machines dedicated to running GNUnet maybe fine with 99.

		Default is 50.
    
endmenu

menu "Transports" "Transports"

    if Meta::ADVANCED

	menu "UDP Transport" "UDP"

		config BLACKLIST
		string "Disallow connections from"
		default "127.0.0.1/8;172.16.0.0/12;192.168.0.0/16;10.0.0.0/255.0.0.0;"
		help
			With this option, you can specify which networks you do NOT want to
			connect to. Usually you will want to filter loopback (127.0.0.1,
			misconfigured GNUnet hosts), virtual private networks, [add a class
			C network here], 192.168.0.0, 172.16.0.0 and 10.0.0.0 (RFC
			1918). The format is IP/NETMASK where the IP is specified in
			dotted-decimal and the netmask either in CIDR notation (/16) or in
			dotted decimal (255.255.0.0). Several entries must be separated by a
			semicolon, spaces are not allowed.  Notice that if your host is on a
			private network like the above, you will have to configure your NAT
			to allow incoming requests and you will want to modify this option.
			The idea behind this option is not to discriminate against NAT users
			but to ensure that hosts only attempt to connect to machines that
			they have a chance to actually reach.  Of course, you could also use
			it against known adversaries that have a small IP range at their
			disposal :-) 
			
			Example (and default):
			127.0.0.1/8;172.16.0.0/12;192.168.0.0/16;10.0.0.0/255.0.0.0;
	  
		config MTU
		int "MTU"
		default 1472
		depends on Meta::RARE
		help
		  	The MTU to use. Do not use more than your OS
			(and firewall) can support. Typically, your 
			network-MTU - 28 is optimal, for ethernet, this
			is 1472, the default. Do not use less than 1200.
		
			The default is 1472, which is also used if you specify nothing.

	endmenu
  
	menu "TCP Transport" "TCP"

		config BLACKLIST
		string "Disallow connections from"
		default "127.0.0.1/8;172.16.0.0/12;192.168.0.0/16;10.0.0.0/255.0.0.0;"
		help
			With this option, you can specify which networks you do NOT want to
			connect to. Usually you will want to filter loopback (127.0.0.1,
			misconfigured GNUnet hosts), virtual private networks, [add a class
			C network here], 192.168.0.0, 172.16.0.0 and 10.0.0.0 (RFC
			1918). The format is IP/NETMASK where the IP is specified in
			dotted-decimal and the netmask either in CIDR notation (/16) or in
			dotted decimal (255.255.0.0). Several entries must be separated by a
			semicolon, spaces are not allowed.  Notice that if your host is on a
			private network like the above, you will have to configure your NAT
			to allow incoming requests and you will want to modify this option.
			The idea behind this option is not to discriminate against NAT users
			but to ensure that hosts only attempt to connect to machines that
			they have a chance to actually reach.  Of course, you could also use
			it against known adversaries that have a small IP range at their
			disposal :-)
			Example (and default):
			BLACKLIST = 127.0.0.1/8;192.168.0.0/16;10.0.0.0/255.0.0.0; 
	  
	endmenu

    endif

    if Meta::EXPERIMENTAL && Meta::RARE && Meta::ADVANCED
  
  	menu "UDP over IPv6" "UDP6"
  		  		
			config BLACKLIST
			string "Disallow connections from"
  	
  		  		
			config MTU
			int "MTU"
			default 1440
			depends on Meta::RARE
  	endmenu

  	menu "TCP over IPv6" "TCP6"
			
			config BLACKLIST
			string "Disallow connections from"
  	
  	endmenu
  
    endif
  
    if Meta::ADVANCED
  
	  menu "SMTP" "SMTP"

		config EMAIL
		string "Receiver address for inbound E-mail"
		default "foo@bar.com"
		help
			E-mail address to use to receive messages.  Do not specify anything
			if you do not want to allow SMTP as a receiver protocol; you can
			still *send* email to establish connections in that case.  Example:
			EMAIL = foo@bar.com

		config MTU
		int "MTU"
		default 65528
		help
			MTU for the E-mail. How large should the E-mails be that we send
			out? Default is 65528 (bytes).

	  	config PORT
	  	int "Port of the SMTP server for outbound mail"
	  	range 1 65535
	  	default 25
	  	help
		  	Port of the SMTP server for outbound mail.  If not specified, the
			TCP/SMTP entry from /etc/services is consulted.  Default is 25.

		config SERVER
		string "Hostname of the SMTP server"
		default localhost
		help
			Hostname of the SMTP server. Default is "localhost".
			
		config SENDERHOSTNAME
		string "Hostname of the sender host"
		default "myhost.example.com"
		help
			Hostname of the sender host to use in the HELLO message of the SMTP
			protocol (not to be confused with the HELLO in the GNUnet p2p
			protocol). Pick a hostname that works for your SMTP server. This
			hostname has nothing to do with the hostname of the SMTP server or
			your E-mail sender address (though those names should work in most
			cases). In fact, it often does not even have to exist as a real
			machine. Example: "myhost.example.com"

		config FILTER
		string "Filter-line to use in the E-mail header"
		default "X-mailer: GNUnet"
		help
			Filter-line to use in the E-mail header. This filter will be
			included in the GNUnet-generated E-mails and should be used to
			filter out GNUnet traffic from the rest of your E-mail. Make sure
			that the filter you choose is highly unlikely to occur in any other
			message.
			
			Examples:
			FILTER = "X-mailer: GNUnet"
			FILTER = "Subject: foobar5252"

			In order to make the SMTP transport work, add the following line
			to your ~/.procmailrc file:

			:0:
			* ^X-mailer: GNUnet
			/tmp/gnunet.smtp
			# where do you want your other e-mail delivered to
			# (default: /var/spool/mail/)
			:0:
			/var/spool/mail/

			You can test your configuration with

			$ gnunet-transport-check -t smtp -T 60000

			Make sure to poll your e-mail within the minute that
			gnunet-transport-check waits for a response.


		config PIPE
		string "Name of the pipe via which procmail sends filterd E-mails"
		default "/tmp/gnunet.smtp"
		help
			Name of the pipe via which procmail sends the filtered E-mails to
			the node.  Default is /tmp/gnunet.smtp

	  endmenu
	  
	  menu "HTTP" "HTTP"
	  
	  	config PORT
	  	int "Port"
	  	range 0 65535
	  	default 1080
	  	
		config BLACKLIST
		string "Disallow connections from"
		default "127.0.0.1/8;172.16.0.0/12;192.168.0.0/16;10.0.0.0/255.0.0.0;"	  	
	  
	  endmenu
  
    endif

endmenu

menu "Applications" ""

	menu "Anonymous file sharing" "FS"

		config DIR
		string "Directory for storing FS data"
		default "$GNUNETD_HOME/data/fs/"
		depends on Meta::ADVANCED
		help
			Where to store the FS related data (content, etc)?
		
		config INDEX-DIRECTORY
		string "Where to store indexed files"
		default "$GNUNETD_HOME/data/shared/"
		depends on Meta::ADVANCED
		help
			Where to store indexed files (NEW!)
			Note that you MUST not copy files directly to this
			directory.  gnunet-insert (or gnunet-gtk) will copy
			the files that you index to this directory.  With the
			-l option you instead create a link (if gnunetd and
			gnunet-insert run on the same machine) instead.
			
			The QUOTA option does NOT apply for this directory.
			To limit how much can be placed in this directory
			set the option INDEX-QUOTA.  Files that are merely
			linked do not count towards the quota.
			
			If you uncomment this option gnunetd will refuse
			content indexing requests (insertion will still be
			possible).
			
			Default is $GNUNETD_HOME/data/shared/

		config INDEX-QUOTA
		int "Indexing quota"
		default 8192
		help
			Indexing quota.  Default is 8192.
		

	endmenu
	
	menu "DHT" "DHT"
		config BUCKETCOUNT
		int "Number of buckets to use"
		default 160
		help
			Number of buckets to use (determines memory requirements)
			Default (and maximum) is 160.

		config MASTER-TABLE-SIZE
		int "Amount of memory (in bytes) to use for the master table"
		default 65536
		help
			Amount of memory (in bytes) to use for the master table
			(table that caches table-to-peer mappings).
			Default is 65536.
	endmenu

    endif
	
endmenu
	

