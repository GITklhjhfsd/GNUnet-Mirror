0.7.0pre5 [7'05] ("API cleanup"):
- cleanup API: could we move util/string.c to
  plibc? (or, assuming they are also needed
  on BSD, into conf/ (or avoid using those functions))?
  Just trying to keep the API small here. [ NILS ? ]
  

0.7.0 [8'05?] (aka "compatibility? what's that?"):
- Missing Features:
  * resolve "FIXME 0.7": only sqlite magic factor missing! [Nils]
  * #593 (gnunet-setup): php-ification for i18n [ Nils ]
  * #851, #852,#853 (gnunet-setup nitpicks) [Nils]
  * permissions on indexed files? [Nils]
    If gnunetd has insufficient file permissions on files
    to be indexed, copy it to shared dir and index it there.
  * Windows installer [Nils]
    * Uninstall
      * Remove account
      * Ask to remove lib/
  * auto-nice
   * Windows: SetPriorityClass()
   * Linux: if (getConfigurationInt("GNUNETD", "NICE") != 0) nice(getConfigurationInt("GNUNETD", "NICE"))
- gnunet-setup: [Nils]
  * gconfig: fix focus changes
- Additional (automated, make check-style) testing:
  * gnunet-tracekit
  * gap and economy
  * FSUI:
    + collections
    + recursive uploads and downloads (incl. persistence)
    + namespaces
    + URI tracking
- Documentation:
  * ECRS block format changes (dramatic!)
  * Hacking GNUnet

0.7.0a (bugfixes)

0.7.1 (aka "stabilization"):
- Optimizations:
  * directories can be compacted -- add heuristic to determine
    if we should NOT padd with zeros (if we would waste too
    much space).  Needs some lookahead for size of remaining
    directory entries. (theoretically can compact some directories
    by 50% (?) -- incidentially 25% is what gzip can do on the
    current directories!)
- gnunet-chat
- DHT:
  * make dht tests work
  * XFS [ location URIs ]
- DHT optimizations [ use additional optional fields (HELOs) ]
- #747 (sharing stats for gnunet-gtk)
- insert meta-data under hash (md5? sha1? sha-512? GNUnet-URI?)
  as keyword (to allow getting meta-data from URI only)
- Documentation:
  * LJ article
- support using -k multiple times in gnunet-pseudonym
- maybe: cache kblock-public/private keys 
    (1024 bit keys are much better than the 2048 bit keys,
     but this would give another performance boost, especially for
     insertion of zip files with hundreds of files/keywords!)

1.0.0 (aka "userfriendly"):
- implement testbed for profiling



